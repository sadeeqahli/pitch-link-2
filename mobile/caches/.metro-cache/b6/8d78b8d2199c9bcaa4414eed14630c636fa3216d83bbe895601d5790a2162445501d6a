{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoFontLoader = require(_dependencyMap[2], \"./ExpoFontLoader\");\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[3], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[4], \"./FontLoader\");\n  var _memory = require(_dependencyMap[5], \"./memory\");\n  var _server = require(_dependencyMap[6], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (typeof ExpoFontLoader.default.isLoaded !== 'function') {\n        throw new Error(`expected ExpoFontLoader.isLoaded to be a function, was ${typeof ExpoFontLoader.default.isLoaded}`);\n      }\n      return (0, _memory.isLoadedInCache)(fontFamily) || ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-app-config) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator.default)(function* (fontFamilyOrFontMap, options) {\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      yield ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":213,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,29,0,"exports"],[13,9,29,0],[13,10,29,0,"getLoadedFonts"],[13,24,29,0],[13,27,29,0,"getLoadedFonts"],[13,41,29,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"isLoading"],[14,19,39,0],[14,22,39,0,"isLoading"],[14,31,39,0],[15,2,57,0,"exports"],[15,9,57,0],[15,10,57,0,"loadAsync"],[15,19,57,0],[15,22,57,0,"loadAsync"],[15,31,57,0],[16,2,113,0,"exports"],[16,9,113,0],[16,10,113,0,"unloadAllAsync"],[16,24,113,0],[16,27,113,0,"unloadAllAsync"],[16,41,113,0],[17,2,133,0,"exports"],[17,9,133,0],[17,10,133,0,"unloadAsync"],[17,21,133,0],[17,24,133,0,"unloadAsync"],[17,35,133,0],[18,2,167,0,"Object"],[18,8,167,0],[18,9,167,0,"defineProperty"],[18,23,167,0],[18,24,167,0,"exports"],[18,31,167,0],[19,4,167,0,"enumerable"],[19,14,167,0],[20,4,167,0,"get"],[20,7,167,0],[20,18,167,0,"get"],[20,19,167,0],[21,6,167,0],[21,13,167,9,"FontDisplay"],[21,23,167,20],[21,24,167,20,"FontDisplay"],[21,35,167,20],[22,4,167,20],[23,2,167,20],[24,2,167,23],[24,6,167,23,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,167,23],[24,45,167,23,"require"],[24,52,167,23],[24,53,167,23,"_dependencyMap"],[24,67,167,23],[25,2,167,23],[25,6,167,23,"_asyncToGenerator"],[25,23,167,23],[25,26,167,23,"_interopDefault"],[25,41,167,23],[25,42,167,23,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,167,23],[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_ExpoFontLoader"],[27,21,2,0],[27,24,2,0,"require"],[27,31,2,0],[27,32,2,0,"_dependencyMap"],[27,46,2,0],[28,2,2,0],[28,6,2,0,"ExpoFontLoader"],[28,20,2,0],[28,23,2,0,"_interopDefault"],[28,38,2,0],[28,39,2,0,"_ExpoFontLoader"],[28,54,2,0],[29,2,3,0],[29,6,3,0,"_FontTypes"],[29,16,3,0],[29,19,3,0,"require"],[29,26,3,0],[29,27,3,0,"_dependencyMap"],[29,41,3,0],[30,2,4,0],[30,6,4,0,"_FontLoader"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,5,0],[31,6,5,0,"_memory"],[31,13,5,0],[31,16,5,0,"require"],[31,23,5,0],[31,24,5,0,"_dependencyMap"],[31,38,5,0],[32,2,6,0],[32,6,6,0,"_server"],[32,13,6,0],[32,16,6,0,"require"],[32,23,6,0],[32,24,6,0,"_dependencyMap"],[32,38,6,0],[33,2,7,0],[34,2,8,0],[35,0,9,0],[36,0,10,0],[37,0,11,0],[38,0,12,0],[39,0,13,0],[40,2,14,7],[40,11,14,16,"isLoaded"],[40,19,14,24,"isLoaded"],[40,20,14,25,"fontFamily"],[40,30,14,35],[40,32,14,37],[41,4,15,4],[41,8,15,8,"Platform"],[41,24,15,16],[41,25,15,16,"Platform"],[41,33,15,16],[41,34,15,17,"OS"],[41,36,15,19],[41,41,15,24],[41,46,15,29],[41,48,15,31],[42,6,16,8],[42,10,16,12],[42,17,16,19,"ExpoFontLoader"],[42,31,16,33],[42,32,16,33,"default"],[42,39,16,33],[42,40,16,34,"isLoaded"],[42,48,16,42],[42,53,16,47],[42,63,16,57],[42,65,16,59],[43,8,17,12],[43,14,17,18],[43,18,17,22,"Error"],[43,23,17,27],[43,24,17,28],[43,82,17,86],[43,89,17,93,"ExpoFontLoader"],[43,103,17,107],[43,104,17,107,"default"],[43,111,17,107],[43,112,17,108,"isLoaded"],[43,120,17,116],[43,122,17,118],[43,123,17,119],[44,6,18,8],[45,6,19,8],[45,13,19,15],[45,17,19,15,"isLoadedInCache"],[45,24,19,30],[45,25,19,30,"isLoadedInCache"],[45,40,19,30],[45,42,19,31,"fontFamily"],[45,52,19,41],[45,53,19,42],[45,57,19,46,"ExpoFontLoader"],[45,71,19,60],[45,72,19,60,"default"],[45,79,19,60],[45,80,19,61,"isLoaded"],[45,88,19,69],[45,89,19,70,"fontFamily"],[45,99,19,80],[45,100,19,81],[46,4,20,4],[47,4,21,4],[47,11,21,11],[47,15,21,11,"isLoadedNative"],[47,22,21,25],[47,23,21,25,"isLoadedNative"],[47,37,21,25],[47,39,21,26,"fontFamily"],[47,49,21,36],[47,50,21,37],[48,2,22,0],[49,2,23,0],[50,0,24,0],[51,0,25,0],[52,0,26,0],[53,0,27,0],[54,0,28,0],[55,2,29,7],[55,11,29,16,"getLoadedFonts"],[55,25,29,30,"getLoadedFonts"],[55,26,29,30],[55,28,29,33],[56,4,30,4],[56,11,30,11,"ExpoFontLoader"],[56,25,30,25],[56,26,30,25,"default"],[56,33,30,25],[56,34,30,26,"getLoadedFonts"],[56,48,30,40],[56,49,30,41],[56,50,30,42],[57,2,31,0],[58,2,32,0],[59,2,33,0],[60,0,34,0],[61,0,35,0],[62,0,36,0],[63,0,37,0],[64,0,38,0],[65,2,39,7],[65,11,39,16,"isLoading"],[65,20,39,25,"isLoading"],[65,21,39,26,"fontFamily"],[65,31,39,36],[65,33,39,38],[66,4,40,4],[66,11,40,11,"fontFamily"],[66,21,40,21],[66,25,40,25,"loadPromises"],[66,32,40,37],[66,33,40,37,"loadPromises"],[66,45,40,37],[67,2,41,0],[68,2,42,0],[69,2,43,0],[70,0,44,0],[71,0,45,0],[72,0,46,0],[73,0,47,0],[74,0,48,0],[75,0,49,0],[76,0,50,0],[77,0,51,0],[78,0,52,0],[79,0,53,0],[80,0,54,0],[81,0,55,0],[82,0,56,0],[83,2,57,7],[83,11,57,16,"loadAsync"],[83,20,57,25,"loadAsync"],[83,21,57,26,"fontFamilyOrFontMap"],[83,40,57,45],[83,42,57,47,"source"],[83,48,57,53],[83,50,57,55],[84,4,58,4],[85,4,59,4],[86,4,60,4],[87,4,61,4],[87,8,61,10,"isServer"],[87,16,61,18],[87,19,61,21,"Platform"],[87,35,61,29],[87,36,61,29,"Platform"],[87,44,61,29],[87,45,61,30,"OS"],[87,47,61,32],[87,52,61,37],[87,57,61,42],[87,61,61,46],[87,68,61,53,"window"],[87,74,61,59],[87,79,61,64],[87,90,61,75],[88,4,62,4],[88,8,62,8],[88,15,62,15,"fontFamilyOrFontMap"],[88,34,62,34],[88,39,62,39],[88,47,62,47],[88,49,62,49],[89,6,63,8],[89,10,63,12,"source"],[89,16,63,18],[89,18,63,20],[90,8,64,12],[90,15,64,19,"Promise"],[90,22,64,26],[90,23,64,27,"reject"],[90,29,64,33],[90,30,64,34],[90,34,64,38,"CodedError"],[90,50,64,48],[90,51,64,48,"CodedError"],[90,61,64,48],[90,62,64,49],[90,76,64,63],[90,78,64,65],[90,132,64,119,"source"],[90,138,64,125],[90,244,64,231],[90,245,64,232],[90,246,64,233],[91,6,65,8],[92,6,66,8],[92,10,66,14,"fontMap"],[92,17,66,21],[92,20,66,24,"fontFamilyOrFontMap"],[92,39,66,43],[93,6,67,8],[93,10,67,14,"names"],[93,15,67,19],[93,18,67,22,"Object"],[93,24,67,28],[93,25,67,29,"keys"],[93,29,67,33],[93,30,67,34,"fontMap"],[93,37,67,41],[93,38,67,42],[94,6,68,8],[94,10,68,12,"isServer"],[94,18,68,20],[94,20,68,22],[95,8,69,12,"names"],[95,13,69,17],[95,14,69,18,"map"],[95,17,69,21],[95,18,69,23,"name"],[95,22,69,27],[95,26,69,32],[95,30,69,32,"registerStaticFont"],[95,37,69,50],[95,38,69,50,"registerStaticFont"],[95,56,69,50],[95,58,69,51,"name"],[95,62,69,55],[95,64,69,57,"fontMap"],[95,71,69,64],[95,72,69,65,"name"],[95,76,69,69],[95,77,69,70],[95,78,69,71],[95,79,69,72],[96,8,70,12],[96,15,70,19,"Promise"],[96,22,70,26],[96,23,70,27,"resolve"],[96,30,70,34],[96,31,70,35],[96,32,70,36],[97,6,71,8],[98,6,72,8],[98,13,72,15,"Promise"],[98,20,72,22],[98,21,72,23,"all"],[98,24,72,26],[98,25,72,27,"names"],[98,30,72,32],[98,31,72,33,"map"],[98,34,72,36],[98,35,72,38,"name"],[98,39,72,42],[98,43,72,47,"loadFontInNamespaceAsync"],[98,67,72,71],[98,68,72,72,"name"],[98,72,72,76],[98,74,72,78,"fontMap"],[98,81,72,85],[98,82,72,86,"name"],[98,86,72,90],[98,87,72,91],[98,88,72,92],[98,89,72,93],[98,90,72,94],[98,91,72,95,"then"],[98,95,72,99],[98,96,72,100],[98,102,72,106],[98,103,72,108],[98,104,72,109],[98,105,72,110],[99,4,73,4],[100,4,74,4],[100,8,74,8,"isServer"],[100,16,74,16],[100,18,74,18],[101,6,75,8],[101,10,75,8,"registerStaticFont"],[101,17,75,26],[101,18,75,26,"registerStaticFont"],[101,36,75,26],[101,38,75,27,"fontFamilyOrFontMap"],[101,57,75,46],[101,59,75,48,"source"],[101,65,75,54],[101,66,75,55],[102,6,76,8],[102,13,76,15,"Promise"],[102,20,76,22],[102,21,76,23,"resolve"],[102,28,76,30],[102,29,76,31],[102,30,76,32],[103,4,77,4],[104,4,78,4],[104,11,78,11,"loadFontInNamespaceAsync"],[104,35,78,35],[104,36,78,36,"fontFamilyOrFontMap"],[104,55,78,55],[104,57,78,57,"source"],[104,63,78,63],[104,64,78,64],[105,2,79,0],[106,2,79,1],[106,11,80,15,"loadFontInNamespaceAsync"],[106,35,80,39,"loadFontInNamespaceAsync"],[106,36,80,39,"_x"],[106,38,80,39],[106,40,80,39,"_x2"],[106,43,80,39],[107,4,80,39],[107,11,80,39,"_loadFontInNamespaceAsync"],[107,36,80,39],[107,37,80,39,"apply"],[107,42,80,39],[107,49,80,39,"arguments"],[107,58,80,39],[108,2,80,39],[108,4,108,0],[109,2,109,0],[110,0,110,0],[111,0,111,0],[112,0,112,0],[113,2,109,0],[113,11,109,0,"_loadFontInNamespaceAsync"],[113,37,109,0],[114,4,109,0,"_loadFontInNamespaceAsync"],[114,29,109,0],[114,36,109,0,"_asyncToGenerator"],[114,53,109,0],[114,54,109,0,"default"],[114,61,109,0],[114,63,80,0],[114,74,80,40,"fontFamily"],[114,84,80,50],[114,86,80,52,"source"],[114,92,80,58],[114,94,80,60],[115,6,81,4],[115,10,81,8],[115,11,81,9,"source"],[115,17,81,15],[115,19,81,17],[116,8,82,8],[116,14,82,14],[116,18,82,18,"CodedError"],[116,34,82,28],[116,35,82,28,"CodedError"],[116,45,82,28],[116,46,82,29],[116,63,82,46],[116,65,82,48],[116,114,82,97,"fontFamily"],[116,124,82,107],[116,130,82,113,"source"],[116,136,82,119],[116,206,82,189,"fontFamily"],[116,216,82,199],[116,219,82,202],[116,220,82,203],[117,6,83,4],[118,6,84,4],[119,6,85,4],[120,6,86,4],[120,10,86,8,"isLoaded"],[120,18,86,16],[120,19,86,17,"fontFamily"],[120,29,86,27],[120,30,86,28],[120,32,86,30],[121,8,87,8],[122,6,88,4],[123,6,89,4],[123,10,89,8,"loadPromises"],[123,17,89,20],[123,18,89,20,"loadPromises"],[123,30,89,20],[123,31,89,21,"hasOwnProperty"],[123,45,89,35],[123,46,89,36,"fontFamily"],[123,56,89,46],[123,57,89,47],[123,59,89,49],[124,8,90,8],[124,15,90,15,"loadPromises"],[124,22,90,27],[124,23,90,27,"loadPromises"],[124,35,90,27],[124,36,90,28,"fontFamily"],[124,46,90,38],[124,47,90,39],[125,6,91,4],[126,6,92,4],[127,6,93,4],[128,6,94,4],[129,6,95,4],[130,6,96,4],[130,10,96,10,"asset"],[130,15,96,15],[130,18,96,18],[130,22,96,18,"getAssetForSource"],[130,33,96,35],[130,34,96,35,"getAssetForSource"],[130,51,96,35],[130,53,96,36,"source"],[130,59,96,42],[130,60,96,43],[131,6,97,4,"loadPromises"],[131,13,97,16],[131,14,97,16,"loadPromises"],[131,26,97,16],[131,27,97,17,"fontFamily"],[131,37,97,27],[131,38,97,28],[131,41,97,31],[131,45,97,31,"_asyncToGenerator"],[131,62,97,31],[131,63,97,31,"default"],[131,70,97,31],[131,72,97,32],[131,85,97,44],[132,8,98,8],[132,12,98,12],[133,10,99,12],[133,16,99,18],[133,20,99,18,"loadSingleFontAsync"],[133,31,99,37],[133,32,99,37,"loadSingleFontAsync"],[133,51,99,37],[133,53,99,38,"fontFamily"],[133,63,99,48],[133,65,99,50,"asset"],[133,70,99,55],[133,71,99,56],[134,10,100,12],[134,14,100,12,"markLoaded"],[134,21,100,22],[134,22,100,22,"markLoaded"],[134,32,100,22],[134,34,100,23,"fontFamily"],[134,44,100,33],[134,45,100,34],[135,8,101,8],[135,9,101,9],[135,18,102,16],[136,10,103,12],[136,17,103,19,"loadPromises"],[136,24,103,31],[136,25,103,31,"loadPromises"],[136,37,103,31],[136,38,103,32,"fontFamily"],[136,48,103,42],[136,49,103,43],[137,8,104,8],[138,6,105,4],[138,7,105,5],[138,9,105,7],[138,10,105,8],[139,6,106,4],[139,12,106,10,"loadPromises"],[139,19,106,22],[139,20,106,22,"loadPromises"],[139,32,106,22],[139,33,106,23,"fontFamily"],[139,43,106,33],[139,44,106,34],[140,4,107,0],[140,5,107,1],[141,4,107,1],[141,11,107,1,"_loadFontInNamespaceAsync"],[141,36,107,1],[141,37,107,1,"apply"],[141,42,107,1],[141,49,107,1,"arguments"],[141,58,107,1],[142,2,107,1],[143,2,107,1],[143,11,113,22,"unloadAllAsync"],[143,25,113,36,"unloadAllAsync"],[143,26,113,36],[144,4,113,36],[144,11,113,36,"_unloadAllAsync"],[144,26,113,36],[144,27,113,36,"apply"],[144,32,113,36],[144,39,113,36,"arguments"],[144,48,113,36],[145,2,113,36],[145,4,123,0],[146,2,124,0],[147,0,125,0],[148,0,126,0],[149,0,127,0],[150,0,128,0],[151,0,129,0],[152,0,130,0],[153,0,131,0],[154,0,132,0],[155,2,124,0],[155,11,124,0,"_unloadAllAsync"],[155,27,124,0],[156,4,124,0,"_unloadAllAsync"],[156,19,124,0],[156,26,124,0,"_asyncToGenerator"],[156,43,124,0],[156,44,124,0,"default"],[156,51,124,0],[156,53,113,7],[156,66,113,39],[157,6,114,4],[157,10,114,8],[157,11,114,9,"ExpoFontLoader"],[157,25,114,23],[157,26,114,23,"default"],[157,33,114,23],[157,34,114,24,"unloadAllAsync"],[157,48,114,38],[157,50,114,40],[158,8,115,8],[158,14,115,14],[158,18,115,18,"UnavailabilityError"],[158,34,115,37],[158,35,115,37,"UnavailabilityError"],[158,54,115,37],[158,55,115,38],[158,66,115,49],[158,68,115,51],[158,84,115,67],[158,85,115,68],[159,6,116,4],[160,6,117,4],[160,10,117,8,"Object"],[160,16,117,14],[160,17,117,15,"keys"],[160,21,117,19],[160,22,117,20,"loadPromises"],[160,29,117,32],[160,30,117,32,"loadPromises"],[160,42,117,32],[160,43,117,33],[160,44,117,34,"length"],[160,50,117,40],[160,52,117,42],[161,8,118,8],[161,14,118,14],[161,18,118,18,"CodedError"],[161,34,118,28],[161,35,118,28,"CodedError"],[161,45,118,28],[161,46,118,29],[161,58,118,41],[161,60,118,43],[161,112,118,95,"Object"],[161,118,118,101],[161,119,118,102,"keys"],[161,123,118,106],[161,124,118,107,"loadPromises"],[161,131,118,119],[161,132,118,119,"loadPromises"],[161,144,118,119],[161,145,118,120],[161,146,118,121,"join"],[161,150,118,125],[161,151,118,126],[161,155,118,130],[161,156,118,131],[161,158,118,133],[161,159,118,134],[162,6,119,4],[163,6,120,4],[163,10,120,4,"purgeCache"],[163,17,120,14],[163,18,120,14,"purgeCache"],[163,28,120,14],[163,30,120,15],[163,31,120,16],[164,6,121,4],[164,12,121,10,"ExpoFontLoader"],[164,26,121,24],[164,27,121,24,"default"],[164,34,121,24],[164,35,121,25,"unloadAllAsync"],[164,49,121,39],[164,50,121,40],[164,51,121,41],[165,4,122,0],[165,5,122,1],[166,4,122,1],[166,11,122,1,"_unloadAllAsync"],[166,26,122,1],[166,27,122,1,"apply"],[166,32,122,1],[166,39,122,1,"arguments"],[166,48,122,1],[167,2,122,1],[168,2,122,1],[168,11,133,22,"unloadAsync"],[168,22,133,33,"unloadAsync"],[168,23,133,33,"_x3"],[168,26,133,33],[168,28,133,33,"_x4"],[168,31,133,33],[169,4,133,33],[169,11,133,33,"_unloadAsync"],[169,23,133,33],[169,24,133,33,"apply"],[169,29,133,33],[169,36,133,33,"arguments"],[169,45,133,33],[170,2,133,33],[171,2,133,33],[171,11,133,33,"_unloadAsync"],[171,24,133,33],[172,4,133,33,"_unloadAsync"],[172,16,133,33],[172,23,133,33,"_asyncToGenerator"],[172,40,133,33],[172,41,133,33,"default"],[172,48,133,33],[172,50,133,7],[172,61,133,34,"fontFamilyOrFontMap"],[172,80,133,53],[172,82,133,55,"options"],[172,89,133,62],[172,91,133,64],[173,6,134,4],[173,10,134,8],[173,11,134,9,"ExpoFontLoader"],[173,25,134,23],[173,26,134,23,"default"],[173,33,134,23],[173,34,134,24,"unloadAsync"],[173,45,134,35],[173,47,134,37],[174,8,135,8],[174,14,135,14],[174,18,135,18,"UnavailabilityError"],[174,34,135,37],[174,35,135,37,"UnavailabilityError"],[174,54,135,37],[174,55,135,38],[174,66,135,49],[174,68,135,51],[174,81,135,64],[174,82,135,65],[175,6,136,4],[176,6,137,4],[176,10,137,8],[176,17,137,15,"fontFamilyOrFontMap"],[176,36,137,34],[176,41,137,39],[176,49,137,47],[176,51,137,49],[177,8,138,8],[177,12,138,12,"options"],[177,19,138,19],[177,21,138,21],[178,10,139,12],[178,16,139,18],[178,20,139,22,"CodedError"],[178,36,139,32],[178,37,139,32,"CodedError"],[178,47,139,32],[178,48,139,33],[178,62,139,47],[178,64,139,49],[178,119,139,104,"options"],[178,126,139,111],[178,234,139,219],[178,235,139,220],[179,8,140,8],[180,8,141,8],[180,12,141,14,"fontMap"],[180,19,141,21],[180,22,141,24,"fontFamilyOrFontMap"],[180,41,141,43],[181,8,142,8],[181,12,142,14,"names"],[181,17,142,19],[181,20,142,22,"Object"],[181,26,142,28],[181,27,142,29,"keys"],[181,31,142,33],[181,32,142,34,"fontMap"],[181,39,142,41],[181,40,142,42],[182,8,143,8],[182,14,143,14,"Promise"],[182,21,143,21],[182,22,143,22,"all"],[182,25,143,25],[182,26,143,26,"names"],[182,31,143,31],[182,32,143,32,"map"],[182,35,143,35],[182,36,143,37,"name"],[182,40,143,41],[182,44,143,46,"unloadFontInNamespaceAsync"],[182,70,143,72],[182,71,143,73,"name"],[182,75,143,77],[182,77,143,79,"fontMap"],[182,84,143,86],[182,85,143,87,"name"],[182,89,143,91],[182,90,143,92],[182,91,143,93],[182,92,143,94],[182,93,143,95],[183,8,144,8],[184,6,145,4],[185,6,146,4],[185,19,146,17,"unloadFontInNamespaceAsync"],[185,45,146,43],[185,46,146,44,"fontFamilyOrFontMap"],[185,65,146,63],[185,67,146,65,"options"],[185,74,146,72],[185,75,146,73],[186,4,147,0],[186,5,147,1],[187,4,147,1],[187,11,147,1,"_unloadAsync"],[187,23,147,1],[187,24,147,1,"apply"],[187,29,147,1],[187,36,147,1,"arguments"],[187,45,147,1],[188,2,147,1],[189,2,147,1],[189,11,148,15,"unloadFontInNamespaceAsync"],[189,37,148,41,"unloadFontInNamespaceAsync"],[189,38,148,41,"_x5"],[189,41,148,41],[189,43,148,41,"_x6"],[189,46,148,41],[190,4,148,41],[190,11,148,41,"_unloadFontInNamespaceAsync"],[190,38,148,41],[190,39,148,41,"apply"],[190,44,148,41],[190,51,148,41,"arguments"],[190,60,148,41],[191,2,148,41],[192,2,148,41],[192,11,148,41,"_unloadFontInNamespaceAsync"],[192,39,148,41],[193,4,148,41,"_unloadFontInNamespaceAsync"],[193,31,148,41],[193,38,148,41,"_asyncToGenerator"],[193,55,148,41],[193,56,148,41,"default"],[193,63,148,41],[193,65,148,0],[193,76,148,42,"fontFamily"],[193,86,148,52],[193,88,148,54,"options"],[193,95,148,61],[193,97,148,63],[194,6,149,4],[194,10,149,8],[194,11,149,9,"isLoaded"],[194,19,149,17],[194,20,149,18,"fontFamily"],[194,30,149,28],[194,31,149,29],[194,33,149,31],[195,8,150,8],[196,6,151,4],[196,7,151,5],[196,13,152,9],[197,8,153,8],[197,12,153,8,"purgeFontFamilyFromCache"],[197,19,153,32],[197,20,153,32,"purgeFontFamilyFromCache"],[197,44,153,32],[197,46,153,33,"fontFamily"],[197,56,153,43],[197,57,153,44],[198,6,154,4],[199,6,155,4],[200,6,156,4],[201,6,157,4],[202,6,158,4],[203,6,159,4],[203,10,159,8],[203,11,159,9,"fontFamily"],[203,21,159,19],[203,23,159,21],[204,8,160,8],[204,14,160,14],[204,18,160,18,"CodedError"],[204,34,160,28],[204,35,160,28,"CodedError"],[204,45,160,28],[204,46,160,29],[204,63,160,46],[204,65,160,48],[204,94,160,77],[204,95,160,78],[205,6,161,4],[206,6,162,4],[206,10,162,8],[206,11,162,9,"ExpoFontLoader"],[206,25,162,23],[206,26,162,23,"default"],[206,33,162,23],[206,34,162,24,"unloadAsync"],[206,45,162,35],[206,47,162,37],[207,8,163,8],[207,14,163,14],[207,18,163,18,"UnavailabilityError"],[207,34,163,37],[207,35,163,37,"UnavailabilityError"],[207,54,163,37],[207,55,163,38],[207,66,163,49],[207,68,163,51],[207,81,163,64],[207,82,163,65],[208,6,164,4],[209,6,165,4],[209,12,165,10,"ExpoFontLoader"],[209,26,165,24],[209,27,165,24,"default"],[209,34,165,24],[209,35,165,25,"unloadAsync"],[209,46,165,36],[209,47,165,37,"fontFamily"],[209,57,165,47],[209,59,165,49,"options"],[209,66,165,56],[209,67,165,57],[210,4,166,0],[210,5,166,1],[211,4,166,1],[211,11,166,1,"_unloadFontInNamespaceAsync"],[211,38,166,1],[211,39,166,1,"apply"],[211,44,166,1],[211,51,166,1,"arguments"],[211,60,166,1],[212,2,166,1],[213,0,166,1],[213,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDQ;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXkB"},"hasCjsExports":false},"type":"js/module"}]}